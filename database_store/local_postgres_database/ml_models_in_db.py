# -*- coding: utf-8 -*-
"""ml_models_in_db.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1676nnPTBImm_zGtGXdoF6oXdDVmBZOlr
"""

!sudo apt-get -y -qq update

!sudo apt-get -y -qq install postgresql

!sudo service postgresql start

!sudo -u postgres psql -U postgres -c "ALTER USER postgres PASSWORD 'postgres';"

!sudo -u postgres psql -U postgres -c 'DROP DATABASE IF EXISTS futurex;'

!sudo -u postgres psql -U postgres -c 'CREATE DATABASE futurex;'

!PGPASSWORD=postgres psql -q -h localhost -p 5432 -U postgres -d futurex -f create_model_table.sql

import psycopg2

connection = psycopg2.connect(user='postgres',
                              password='postgres',
                              host='localhost',
                              database='futurex')

cursor = connection.cursor()

select_query = "select * from futurex_model_catalog"

cursor.execute(select_query)

models = cursor.fetchall()

models

import numpy as np
import pandas as pd
training_data = pd.read_csv('storepurchasedata.csv')
X = training_data.iloc[:, :-1].values
y = training_data.iloc[:,-1].values
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size =.20,random_state=0)

from sklearn.preprocessing import StandardScaler
sc = StandardScaler()
X_train = sc.fit_transform(X_train)
X_test = sc.transform(X_test)
from sklearn.neighbors import KNeighborsClassifier
# minkowski is for ecledian distance
classifier = KNeighborsClassifier(n_neighbors = 5, metric = 'minkowski', p = 2)
classifier.fit(X_train, y_train)

y_pred = classifier.predict(X_test)
y_prob = classifier.predict_proba(X_test)[:,1]

from sklearn.metrics import confusion_matrix

cm = confusion_matrix(y_test, y_pred)

from sklearn.metrics import accuracy_score

print(accuracy_score(y_test,y_pred))

import pickle

pickle_classifier_string = pickle.dumps(classifier)
pickle_sc_string = pickle.dumps(sc)

model_insert_sql = "INSERT INTO futurex_model_catalog VALUES(%s, %s, %s)"

insert_tuple = (1, 'classifier', pickle_classifier_string)

cursor = connection.cursor()

cursor.execute(model_insert_sql, insert_tuple)

insert_tuple = (2, 'sc', pickle_sc_string)

cursor.execute(model_insert_sql, insert_tuple)

cursor.close()
connection.commit()

cursor = connection.cursor()
select_query = "select * from futurex_model_catalog"
models =cursor.execute(select_query)
models = cursor.fetchall()
models

classifier_from_db = pickle.loads(models[0][2])
scaler_from_db = pickle.loads(models[1][2])

new_pred = classifier_from_db.predict(scaler_from_db.transform(np.array([[40,20000]])))

new_pred_proba = classifier_from_db.predict_proba(scaler_from_db.transform(np.array([[40,20000]])))[:,1]
print(new_pred)
print(new_pred_proba)

new_pred = classifier_from_db.predict(scaler_from_db.transform(np.array([[42,50000]])))

new_pred_proba = classifier_from_db.predict_proba(scaler_from_db.transform(np.array([[42,50000]])))[:,1]
print(new_pred)
print(new_pred_proba)

